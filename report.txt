====================================SUMMARY=====================================
Items...............:	193	14.85
Formats.............:	26	2.0
 > coding...........:	8	0.31
 > short_answer.....:	9	0.35
 > multiple_choice..:	9	0.35
Target..............:	14	1.08
 > university.......:	13	0.93
 > highschool.......:	1	0.07
Papers..............:	13	1.0
 > original.........:	13	1.0

==========================CLASSIFICATION: commp_model===========================
{'_meta': {'title': 'Competency Structure Model for Programming (COMM_P)', 'description': 'This is a description', 'authors': ['barkmin_mike']}, 'cognitive_processes': {'problem_solving_stage': None, 'interpreting': {'remember': None, 'understand': None, 'analyze': None, 'evaluate': None, 'count': 10}, 'producing': {'apply': None, 'create': None, 'count': 8}, 'count': 10}, 'elements': {'program_components': {'_meta': {'description': 'Program components are the main building block of every program. They are used to determine the overall form of a program.\n'}, 'expressions': {'_meta': {'description': 'An expression computes another value, based on the interpretation of a combination of variables, subprograms and operators. In most languages the evaluation order of an expression can be controlled by parenthesis. Expressions are used to control the flow of a program.\n'}, 'count': 10}, 'coroutines': {'_meta': {'description': 'Generalized subroutines for non-preemptive multitasking. They allow to pause and resume the exGeneralized subroutines for non-preemptive multitasking. They allow to pause and resume the execution.\n'}, 'count': 1}, 'subroutines': {'_meta': {'description': 'They are identified by name and exchange information with the rest of the program using parameters and return values. Depending on the high-level paradigm they can also be called functions, procedures or methods\n'}, 'count': 8}, 'operators': {'_meta': {'description': 'An operator acts on one or more operands. These operands can be infix (4 + 4), prefix (+ 4 4) or postfix (4 4 +).\n'}, 'arithmetic': {'_meta': {'description': 'e.g.: +, -, *, %, ...\n'}, 'count': 11}, 'logical': {'_meta': {'description': 'e.g.: !, ||, not, &&, ?? ...\n'}, 'count': 9}, 'relational': {'_meta': {'description': 'e.g.: >, <, <=, ...\n'}, 'count': 10}, 'ternary': {'_meta': {'description': 'e.g.: _ ? _ : _\n'}}, 'bitwise': {'_meta': {'description': 'e.g.: >>, <<, |, &\n'}}, 'other': {'_meta': {'description': '&hi, *hi, new\n'}, 'count': 1}, 'count': 11}, 'variables': {'_meta': {'description': 'They are named slots in memory where a value is stored.\n'}, 'count': 13}, 'statements': {'_meta': {'description': 'They can be divided into two groups. Assignment statements and the statements to control the flow of a program.\n'}, 'assignment': {'_meta': {'description': 'An assignment statement provides the mechanism by which the user can dynamically change the bindings of values to variables\n'}, 'count': 13}, 'control': {'_meta': {'description': 'Select statements (e.g. if, switch) provide the means of choosing between two or more executing paths, iterative statements are causing a statement or collection to be executed zero, one, or more time or unconditional branch statements, which are transferring the execution control to a specified location in the program.\n'}, 'iterative': {'for': None, 'for_each': None, 'while': None, 'count': 10}, 'select': {'if': None, 'switch': None, 'count': 10}, 'unconditional_branch': {'call': None, 'return': None, 'goto': None, 'break': None, 'continue': None, 'throw': None, 'count': 11}, 'count': 11}, 'count': 13}, 'scope': {'_meta': {'description': 'The scope of a variable or subprogram is the range of statements in which the variable or subprogram is visible.\n'}, 'count': 3}, 'count': 13}, 'data_types': {'scalars': {'_meta': {'description': 'A data type which only consists of a single value. Common representatives: Boolean, Byte, Character, Integer, Float, Pointer, Null, Undefined, Void\n'}, 'boolean': {'count': 4}, 'byte': None, 'character': {'count': 4}, 'integer': {'count': 12}, 'float': {'count': 2}, 'pointer': {'count': 1}, 'null_pointer': {'count': 1}, 'undefined': None, 'void': {'count': 2}, 'count': 13}, 'compounds': {'_meta': {'description': 'A data type which is composed of a set of types. Common representatives: Pair, Array, Associative Array, String, Record, Enum, Union\n'}, 'pair': None, 'array': {'count': 8}, 'associative_array': None, 'string': {'count': 6}, 'record': {'count': 5}, 'enum': {'count': 1}, 'union': None, 'count': 11}, 'count': 13}, 'data_structures': {'list': {'count': 1}, 'stack': None, 'queue': None, 'graph': None, 'linked_list': {'count': 1}, 'binary_tree': None, 'binary_search_tree': {'count': 1}, 'count': 1}, 'algorithmic_paradigms': {'_meta': {'description': 'Algorithmic paradigms are a generic way to design an algorithm. On the highest abstraction level an algorithm can be designed by using the iterative or recursive paradigm. There are also more specific algorithmic paradigms like divide and conquer, backtracking, greedy algorithm and so forth. The knowledge about these algorithmic paradigms helps design algorithms regardless of the high-level paradigm and the concrete languages.\n'}, 'divide_and_conquer': None, 'backtracking': None, 'greedy_algorithm': None, 'iteration': {'count': 9}, 'recursion': {'count': 2}, 'count': 9}, 'count': 13}, 'high_level_paradigm': {'default': {'application': None, 'principles': None}, 'imperative': {'application': None, 'principles': None, 'count': 7}, 'object_oriented': {'application': {'count': 1}, 'principles': {'structure': {'abstraction': {'_meta': {'description': 'Creating classes to simplify aspects of reality using distinctions inherent to the problem\n'}}, 'class': {'_meta': {'description': 'A description of the organization and actions shared by one or more similar objects\n'}, 'count': 1}, 'encapsulation': {'_meta': {'description': 'Designing classes and objects to restrict access to the data and behavior by defining a limited set of messages that an object can receive\n'}, 'count': 2}, 'inheritance': {'_meta': {'description': 'The data and behavior of one class is included in or used as the basis for another class\n'}, 'count': 1}, 'object': {'_meta': {'description': 'An individual, identifiable item, either real or abstract, which contains data about itself and the descriptions of its manipulations of the data\n'}}, 'count': 2}, 'behavior': {'message_passing': {'_meta': {'description': 'An object sends data to another object or asks another object to invoke a method\n'}, 'count': 2}, 'method': {'_meta': {'description': 'A way to access, set, or manipulate an objectâ€™s information\n'}, 'count': 1}, 'polymorphism': {'_meta': {'description': 'Different classes may respond to the same message and each class implements it appropriately\n'}, 'count': 1}, 'count': 2}, 'count': 2}, 'count': 3}, 'functional': {'application': None, 'principles': {'first_class_functions': {'_meta': {'description': 'Functions are first-class citizens that may be manipulated as data.\n'}, 'count': 1}, 'referential_transparency': {'_meta': {'description': 'A function call can be replaced by its return value. It makes the order and count of execution irrelevant.\n'}}, 'immutability': {'_meta': {'description': 'If a value is assigned to some variable, it cannot be reassigned.\n'}}, 'closure': {'_meta': {'description': 'Pairing a function with its environment.\n'}}, 'recursion': {'_meta': {'description': 'It is a situation when a function calls itself.\n'}}, 'lazy_evaluation': {'_meta': {'description': 'A value of an expression is not calculated in the moment of declaration. Instead, the calculation is delayed until needed.\n'}}, 'currying': {'_meta': {'description': 'Is a technique of transforming a function of multiple arguments into evaluating a sequence of functions, each taking one argument.\n'}}, 'pattern_matching': {'_meta': {'description': 'It provides the means to inspect and decompose nested data structure in a single statement.\n'}}, 'polymorphism': {'_meta': {'description': 'The operands of a function can be of more than one single type.\n'}}, 'count': 1}, 'count': 1}, 'procedural': {'application': None, 'principles': None, 'count': 3}, 'logical': {'application': None, 'principles': {'count': 1}, 'count': 1}, 'count': 13}, 'language': {'default': {'build_and_run': None, 'syntax': {'count': 1}, 'semantic': {'count': 1}, 'standard_library': None, 'count': 1}, 'java': {'build_and_run': None, 'syntax': {'count': 6}, 'semantic': {'count': 6}, 'standard_library': {'count': 1}, 'count': 6}, 'python': {'build_and_run': None, 'syntax': None, 'semantic': None, 'standard_library': None}, 'scratch': {'build_and_run': None, 'syntax': None, 'semantic': None, 'standard_library': None}, 'c': {'build_and_run': None, 'syntax': {'count': 2}, 'semantic': {'count': 2}, 'standard_library': {'count': 2}, 'count': 2}, 'c++': {'build_and_run': None, 'syntax': None, 'semantic': None, 'standard_library': None}, 'smalltalk': {'build_and_run': None, 'syntax': None, 'semantic': None, 'standard_library': None}, 'lisp': {'build_and_run': None, 'syntax': None, 'semantic': {'count': 1}, 'standard_library': {'count': 1}, 'count': 1}, 'pascal': {'build_and_run': None, 'syntax': {'count': 1}, 'semantic': {'count': 1}, 'standard_library': None, 'count': 1}, 'prolog': {'build_and_run': None, 'syntax': {'count': 1}, 'semantic': {'count': 1}, 'standard_library': None, 'count': 1}, 'javascript': {'build_and_run': None, 'syntax': None, 'semantic': None, 'standard_library': None}, 'pseudocode': {'build_and_run': None, 'syntax': {'count': 1}, 'semantic': {'count': 1}, 'standard_library': {'count': 1}, '_meta': {'description': 'The guide can be found here: http://tiny.cc/codeguide\n'}, 'count': 4}, 'count': 13}, 'file': 'commp_model'}
cognitive_processes: 10
    problem_solving_stage: 0
    interpreting: 10
        remember: 0
        understand: 0
        analyze: 0
        evaluate: 0
    producing: 8
        apply: 0
        create: 0
elements: 13
    program_components: 13
        expressions: 10
        coroutines: 1
        subroutines: 8
        operators: 11
            arithmetic: 11
            logical: 9
            relational: 10
            ternary: 0
            bitwise: 0
            other: 1
        variables: 13
        statements: 13
            assignment: 13
            control: 11
                iterative: 10
                    for: 0
                    for_each: 0
                    while: 0
                select: 10
                    if: 0
                    switch: 0
                unconditional_branch: 11
                    call: 0
                    return: 0
                    goto: 0
                    break: 0
                    continue: 0
                    throw: 0
        scope: 3
    data_types: 13
        scalars: 13
            boolean: 4
            byte: 0
            character: 4
            integer: 12
            float: 2
            pointer: 1
            null_pointer: 1
            undefined: 0
            void: 2
        compounds: 11
            pair: 0
            array: 8
            associative_array: 0
            string: 6
            record: 5
            enum: 1
            union: 0
    data_structures: 1
        list: 1
        stack: 0
        queue: 0
        graph: 0
        linked_list: 1
        binary_tree: 0
        binary_search_tree: 1
    algorithmic_paradigms: 9
        divide_and_conquer: 0
        backtracking: 0
        greedy_algorithm: 0
        iteration: 9
        recursion: 2
high_level_paradigm: 13
    default: 0
        application: 0
        principles: 0
    imperative: 7
        application: 0
        principles: 0
    object_oriented: 3
        application: 1
        principles: 2
            structure: 2
                abstraction: 0
                class: 1
                encapsulation: 2
                inheritance: 1
                object: 0
            behavior: 2
                message_passing: 2
                method: 1
                polymorphism: 1
    functional: 1
        application: 0
        principles: 1
            first_class_functions: 1
            referential_transparency: 0
            immutability: 0
            closure: 0
            recursion: 0
            lazy_evaluation: 0
            currying: 0
            pattern_matching: 0
            polymorphism: 0
    procedural: 3
        application: 0
        principles: 0
    logical: 1
        application: 0
        principles: 1
language: 13
    default: 1
        build_and_run: 0
        syntax: 1
        semantic: 1
        standard_library: 0
    java: 6
        build_and_run: 0
        syntax: 6
        semantic: 6
        standard_library: 1
    python: 0
        build_and_run: 0
        syntax: 0
        semantic: 0
        standard_library: 0
    scratch: 0
        build_and_run: 0
        syntax: 0
        semantic: 0
        standard_library: 0
    c: 2
        build_and_run: 0
        syntax: 2
        semantic: 2
        standard_library: 2
    c++: 0
        build_and_run: 0
        syntax: 0
        semantic: 0
        standard_library: 0
    smalltalk: 0
        build_and_run: 0
        syntax: 0
        semantic: 0
        standard_library: 0
    lisp: 1
        build_and_run: 0
        syntax: 0
        semantic: 1
        standard_library: 1
    pascal: 1
        build_and_run: 0
        syntax: 1
        semantic: 1
        standard_library: 0
    prolog: 1
        build_and_run: 0
        syntax: 1
        semantic: 1
        standard_library: 0
    javascript: 0
        build_and_run: 0
        syntax: 0
        semantic: 0
        standard_library: 0
    pseudocode: 4
        build_and_run: 0
        syntax: 1
        semantic: 1
        standard_library: 1
file: 0
