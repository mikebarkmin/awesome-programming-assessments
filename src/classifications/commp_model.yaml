_meta:
  title: Competency Structure Model for Programming (COMM_P)
  description: This is a description
  authors:
    - barkmin_mike

cognitive_processes:
  problem_solving_stage:
  interpreting:
    remember:
    understand:
    analyze:
    evaluate:
  producing:
    apply:
    create:

elements:
  program_components:
    _meta:
      description: >
        Program components are the main building block of every program.
        They are used to determine the overall form of a program.
    expressions:
      _meta:
        description: >
          An expression computes another value, based on the
          interpretation of a combination of variables, subprograms and
          operators. In most languages the evaluation order of an
          expression can be controlled by parenthesis. Expressions are
          used to control the flow of a program.
    coroutines:
      _meta:
        description: >
          Generalized subroutines for non-preemptive multitasking. They allow to
          pause and resume the exGeneralized subroutines for non-preemptive
          multitasking. They allow to pause and resume the execution.
    subroutines:
      _meta:
        description: >
          They are identified by name and exchange information with the
          rest of the program using parameters and return values.
          Depending on the high-level paradigm they can also be called
          functions, procedures or methods
    operators:
      _meta:
        description: >
          An operator acts on one or more operands. These operands can be
          infix (4 + 4), prefix (+ 4 4) or postfix (4 4 +).
      arithmetic:
        _meta:
          description: >
            e.g.: +, -, *, %, ...
      logical:
        _meta:
          description: >
            e.g.: !, ||, not, &&, ?? ...
      relational:
        _meta:
          description: >
            e.g.: >, <, <=, ...
      ternary:
        _meta:
          description: >
            e.g.: _ ? _ : _
      bitwise:
        _meta:
          description: >
            e.g.: >>, <<, |, &
      other:
        _meta:
          description: >
            &hi, *hi, new
    variables:
      _meta:
        description: >
          They are named slots in memory where a value is stored.
    statements:
      _meta:
        description: >
          They can be divided into two groups. Assignment statements and
          the statements to control the flow of a program.
      assignment:
        _meta:
          description: >
            An assignment statement provides the mechanism by which the
            user can dynamically change the bindings of values to
            variables
      control:
        _meta:
          description: >
            Select statements (e.g. if, switch) provide the means of
            choosing between two or more executing paths, iterative
            statements are causing a statement or collection to be
            executed zero, one, or more time or unconditional branch
            statements, which are transferring the execution control to a
            specified location in the program.
        iterative:
          for:
          for_each:
          while:
        select:
          if:
          switch:
        unconditional_branch:
          call:
          return:
          goto:
          break:
          continue:
          throw:
    scope:
      _meta:
        description: >
          The scope of a variable or subprogram is the range of statements
          in which the variable or subprogram is visible.
  data_types:
    scalars:
      _meta:
        description: >
          A data type which only consists of a single value. Common
          representatives: Boolean, Byte, Character, Integer, Float,
          Pointer, Null, Undefined, Void
      boolean:
      byte:
      character:
      integer:
      float:
      pointer:
      null_pointer:
      undefined:
      void:
    compounds:
      _meta:
        description: >
          A data type which is composed of a set of types. Common
          representatives: Pair, Array, Associative Array, String, Record,
          Enum, Union
      pair:
      array:
      associative_array:
      string:
      record:
      enum:
      union:
  data_structures:
    list:
    stack:
    queue:
    graph:
    linked_list:
    binary_tree:
    binary_search_tree:
  algorithmic_paradigms:
    _meta:
      description: >
        Algorithmic paradigms are a generic way to design an algorithm. On the
        highest abstraction level an algorithm can be designed by using the
        iterative or recursive paradigm. There are also more specific
        algorithmic paradigms like divide and conquer, backtracking, greedy
        algorithm and so forth. The knowledge about these algorithmic paradigms
        helps design algorithms regardless of the high-level paradigm and the
        concrete languages.
    divide_and_conquer:
    backtracking:
    greedy_algorithm:
    iteration:
    recursion:

high_level_paradigm:
  default: &hlp-default
    application:
    principles:

  imperative:
    <<: *hlp-default

  object_oriented:
    <<: *hlp-default
    principles:
      structure:
        abstraction:
          _meta:
            description: >
              Creating classes to simplify aspects of reality using
              distinctions inherent to the problem
        class:
          _meta:
            description: >
              A description of the organization and actions shared by one
              or more similar objects
        encapsulation:
          _meta:
            description: >
              Designing classes and objects to restrict access to the data
              and behavior by defining a limited set of messages that an
              object can receive
        inheritance:
          _meta:
            description: >
              The data and behavior of one class is included in or used as
              the basis for another class
        object:
          _meta:
            description: >
              An individual, identifiable item, either real or abstract,
              which contains data about itself and the descriptions of its
              manipulations of the data
      behavior:
        message_passing:
          _meta:
            description: >
              An object sends data to another object or asks another
              object to invoke a method
        method:
          _meta:
            description: >
              A way to access, set, or manipulate an objectâ€™s information
        polymorphism:
          _meta:
            description: >
              Different classes may respond to the same message and each
              class implements it appropriately

  functional:
    <<: *hlp-default
    principles:
      first_class_functions:
        _meta:
          description: >
            Functions are first-class citizens that may be manipulated as data.
      referential_transparency:
        _meta:
          description: >
            A function call can be replaced by its return value. It makes the order and count of execution irrelevant.
      immutability:
        _meta:
          description: >
            If a value is assigned to some variable, it cannot be
            reassigned.
      closure:
        _meta:
          description: >
            Pairing a function with its environment.
      recursion:
        _meta:
          description: >
            It is a situation when a function calls itself.
      lazy_evaluation:
        _meta:
          description: >
            A value of an expression is not calculated in the moment of
            declaration. Instead, the calculation is delayed until needed.
      currying:
        _meta:
          description: >
            Is a technique of transforming a function of multiple
            arguments into evaluating a sequence of functions, each taking
            one argument.
      pattern_matching:
        _meta:
          description: >
            It provides the means to inspect and decompose nested data
            structure in a single statement.
      polymorphism:
        _meta:
          description: >
            The operands of a function can be of more than one single
            type.

  procedural:
    <<: *hlp-default

  logical:
    <<: *hlp-default
language:
  default: &language-default
    build_and_run:
    syntax:
    semantic:
    standard_library:

  java:
    <<: *language-default

  python:
    <<: *language-default

  scratch:
    <<: *language-default

  c:
    <<: *language-default

  c++:
    <<: *language-default

  smalltalk:
    <<: *language-default

  lisp:
    <<: *language-default

  pascal:
    <<: *language-default

  prolog:
    <<: *language-default

  javascript:
    <<: *language-default

  pseudocode:
    <<: *language-default
    _meta:
      description: >
        The guide can be found here: http://tiny.cc/codeguide
