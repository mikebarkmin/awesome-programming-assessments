default: &default
  application:
  principles:

object_oriented:
  <<: *default
  principles:
    structure:
      abstraction:
        _meta:
          description: >
            Creating classes to simplify aspects of reality using
            distinctions inherent to the problem
      class:
        _meta:
          description: >
            A description of the organization and actions shared by one
            or more similar objects
      encapsulation:
        _meta:
          description: >
            Designing classes and objects to restrict access to the data
            and behavior by defining a limited set of messages that an
            object can receive
      inheritance:
        _meta:
          description: >
            The data and behavior of one class is included in or used as
            the basis for another class
      object:
        _meta:
          description: >
            An individual, identifiable item, either real or abstract,
            which contains data about itself and the descriptions of its
            manipulations of the data
    behavior:
      message_passing:
        _meta:
          description: >
            An object sends data to another object or asks another
            object to invoke a method
      method:
        _meta:
          description: >
            A way to access, set, or manipulate an objectâ€™s information

functional:
  <<: *default
  principles:
    first_class_functions:
      _meta:
        description: >
          Functions are first-class citizens that may be manipulated as data.
    referential_transparency:
      _meta:
        description: >
          A function call can be replaced by its return value. It makes the order and count of execution irrelevant.
    immutability:
      _meta:
        description: >
          If a value is assigned to some variable, it cannot be
          reassigned.
    closure:
      _meta:
        description: >
          Pairing a function with its environment.
    recursion:
      _meta:
        description: >
          It is a situation when a function calls itself.
    lazy_evaluation:
      _meta:
        description: >
          A value of an expression is not calculated in the moment of
          declaration. Instead, the calculation is delayed until needed.
    currying:
      _meta:
        description: >
          Is a technique of transforming a function of multiple
          arguments into evaluating a sequence of functions, each taking
          one argument.
    pattern_matching:
      _meta:
        description: >
          It provides the means to inspect and decompose nested data
          structure in a single statement.
    polymorphism:
      _meta:
        description: >
          The operands of a function can be of more than one single
          type.

procedural:
  <<: *default

logical:
  <<: *default
